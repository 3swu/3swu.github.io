---
author: wulei
comments: true
date: 2017-08-15 12:49:16+00:00
link: http://wulei.kim/2017/08/15/mvc/
slug: mvc
title: 结合Servlet和JSP：MVC设计模式
wordpress_id: 158
categories:
- JSP
- Servlet
tags:
- MVC
---

对于Servlet和JSP这两种技术，他们有不同的优势：

1.Servlet在Java代码中通过`HttpServletResponse`对象来动态的输出HTML内容。
2.JSP在静态HTML内容中嵌入Java代码，最终翻译并编译为一个Servlet，执行后动态的生成HTML内容。
3.Servlet能很好的组织业务代码，但在Java代码中用拼接HTML语句的方式动态生成HTML内容会使代码维护困难，可读性差。
4.JSP在HTML中混入大量的复杂的业务逻辑的代码，同样也会是代码的维护和可读性变差。


## MVC设计模式


MVC（Model-View-Controller）设计模式使JSP和Servlet扬长避短，发挥各自的优势。

MVC设计模式是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）、控制器（Controller）：



 	
  * Controller：负责转发请求。

 	
  * View：负责界面显示

 	
  * Model：负责业务逻辑，如算法的实现，数据库的设计和数据的存取等。


需要注意：MVC设计模式并不是Java特有的东西，几乎所有的B/S架构的软件都采用了MVC设计模式。

![](http://wulei.kim/wp-content/uploads/2017/08/psb.png)

在JSP/Servlet开发的软件中，这三个部分如下：

1.Web浏览器发送HTTP请求到服务端，被Controller（Servlet）获取并处理。

2.Controller（Servlet）调用核心业务逻辑Model部分，获得结果。

3.Controller（Servlet）将处理结果交给View（JSP），动态生成HTML内容。

4.生成的HTML内容返回到Web浏览器显示。


## JSP Model 2


Java Web开发模型从早期的Model 1第一代到Model 1第二代一直发展到现在的Model 2。



 	
  1. 在JSP Model 1中，服务器端只有JSP页面，所有的操作都在JSP中，就连访问数据库的API也在JSP中完成。也就是说，所有的模块都耦合在一起，这种高耦合的设计模式，对后期的维护和拓展极为不利。![](http://wulei.kim/wp-content/uploads/2017/08/psb-1.png)

 	
  2. Model 1第二代有所改进，把所有的业务逻辑放入到了JavaBean中，而JSP只负责页面显示和请求调度的工作，但是依然存在View和Controller耦合问题。![](http://wulei.kim/wp-content/uploads/2017/08/psb-2.png)

 	
  3. Model 2在上文已经说了，已经有完整的MVC结构了。与上文不同的是，Model层采用JavaBean。![](http://wulei.kim/wp-content/uploads/2017/08/psb-3.png)




## Web/Service/DAO


这是Java Web的经典三层框架，其中Web层包含Servlet和JSP与Web相关的内容，Service业务层，管理具体的功能，DAO（Database Access Object）层是数据层，也叫持久层，封装了对数据库的访问细节。![](http://wulei.kim/wp-content/uploads/2017/08/psb-4.png)


## 结合Servlet和JSP


所有的HTTP请求都应该有Servlet进行处理，业务逻辑完成后，在调用相应的JSP文件生成HTML内容返回到浏览器。在Servlet中，代码的逻辑如下：

    
    /*进行业务逻辑操作，如获取数据*/
    
    //Step 1: 根据你需要导向到的JSP页面（这里以view.jsp为例）创建RequestDispatcher对象
    RequestDispatcher dispatcher = request.getRequestDispatcher("view.jsp");
    
    //Step 2: 将请求转发到JSP页面
    dispatcher.forward(request, response);


Servlet API中的`RequestDispatcher`对象可以将请求转发到指定的JSP文件中。

Servlet和JSP配合最重要的事情就是传递数据，Servlet调用了业务代码（Service）获取到结果后，需要将数据传递到JSP中。

在Servlet中，使用`HttpServletRequest`的`setAttribute()`方法给当前请求对象以键值对的方式设置属性：

    
    request.setAttribute(name, value);


在JSP中可以通过如下的标签获得request对象中的属性，以这种方式来传递数据：

    
    <%= request.getAttribute(name) %>



