---
author: wulei
comments: true
date: 2017-09-14 14:16:33+00:00
link: http://wulei.kim/2017/09/14/ioc_di/
slug: ioc_di
title: 控制反转（IoC）与依赖注入（DI）
wordpress_id: 198
categories:
- Spring
tags:
- 依赖注入
- 控制反转
---

<blockquote>_资料来源：《Spring MVC学习指南》 [美]Paul Deck著 人民邮电出版社_</blockquote>


最近入门Spring框架，其最基本和重要的东西就是IoC容器。首先就要搞清楚什么是控制反转和依赖注入。

通常，在面向对象的程序设计中，软件由许许多多的对象组成，对象与对象之间有着复杂的联系，它们协同工作，互相耦合，使系统能够正常运行，就像齿轮组中的齿轮一样。但是如果一个对象出现了异常，往往会引发整个系统的崩溃，这是因为对象的高耦合造成的。所以高聚合、低耦合的设计思想在软件开发中非常重要。控制反转就是一种降低代码耦合度的设计原则，其基本思想是：借用第三方控制反转容器实现具有依赖关系的对象间的解耦。

假设存在以下情况：

有两个类A和B，A依赖于B，且A有一个importMethod方法使用到了B的对象，如下：

    
    public class A{
        public void importMethod(){
            B b = ...//get an instance of b
            b.usefulMethod();
        }
    }


要想使用类B，类A必须先得取得类B的实例化对象，但如果B是一个接口，此时我们只能选择B的某一个实现类，意味着A的可重用性大大的降低了。

采用控制反转来处理此情景：接管对象的创建工作，并将该对象的引用注入到需要它的组件中，这就叫依赖注入。

为了让框架进行依赖注入，改写类A，为它编写一个set方法使得能将B的对象引用注入到A的对象中。

    
    public class A{
        private B b;
        public void importMethod(){
            b.usefulMethod();
        }
        public void setB(B b){
            this.b = b;
        }
    }


修改后的A类新增了一个set方法，该方法会被框架调用，并将B对象注入到A的对象中，这样A就不用自己创建一个B的实例对象，也可以使用构造方法来实现注入。对比一下：



 	
  * 在没有引入IoC容器之前，对象A依赖于对象B，对象A在初始化或者运行到某一个时刻时，必须自己主动去创建B对象，这时控制权在自己手上。

 	
  * 引入IoC容器之后，这种关系就发生了改变。有人IoC容器的加入，对象A和对象B之间失去了直接的联系，当对象A需要对象B时，会有IoC容器创建一个B对象并交由A使用。这是控制权在IoC容器的手中。


可以看出来，创建对象的主动权由对象自己持有变为了IoC容器持有，控制权颠倒了，这就叫控制反转。而依赖注入就是实现控制反转的一种方式。这也是控制反转和依赖控制的联系和区别。


## Spring框架的依赖注入


使用Spring，程序几乎将所有的重要对象的创建工作交给Spring。Spring支持XML或AutoWired注解两种配置方式。此外，还需要创建一个ApplicationContext对象，代表一个IoC容器，org.springframework.context.ApplicationContext接口有多个实现，包括ClassPathXmlApplicationContext和FileSystemXmlApplicationContext。这两个实现都需要至少一个包含beans（注：Spring管理的对象叫做beans）信息的XML文件，前者会尝试在类加载路径中加载配置文件，而后者会从文件系统中加载。

例：

    
    package com.test;
    
    public class HelloWorld {
    	private String Info;
    
    	public String getInfo() {
    		return Info;
    	}
    
    	public void setInfo(String info) {
    		Info = info;
    	}
    	
    }



    
    package com.test;
    import org.springframework.beans.factory.BeanFactory;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    
    public class Main {
    	private String who = null;
    	
    	public static void main(String[] args){
    		BeanFactory factory = new ClassPathXmlApplicationContext("/applicationContext.xml");
    		HelloWorld hw1 = (HelloWorld)factory.getBean("hello");
    		System.out.println(hw1.getInfo());
    		System.out.println(hw1);
    	}
    }


applicationContext.xml

    
    <?xml version="1.0" encoding="utf-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    	<bean id="hello" class="com.test.HelloWorld">
    		<property name="Info" value="Hello!"/>
    	</bean>
    </beans>


运行结果：

    
    Hello!
    com.test.HelloWorld@55d56113



