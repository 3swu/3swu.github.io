---
author: wulei
comments: true
date: 2017-07-28 13:11:16+00:00
link: http://wulei.kim/2017/07/28/java-5/
slug: java-5
title: Java笔记(5) 多线程基础
wordpress_id: 103
categories:
- Java
tags:
- 同步
- 多线程
- 死锁
---

在上一篇博客《网络进程间通信》中，实现了一个可以从服务器上接收消息的客户端程序和一个只能给客户端发送消息的程序，但是这样的程序在现实中没有什么卵用，不能发送消息只能接受消息算什么聊天软件。

要实现同时能够发送和接收，有几个解决方案：一是每隔一定时间查询一次服务器，比如每隔10秒向服务器发出一次接收消息的请求，这样做太蠢，延迟最高可能有10s。第二种方法就是客户端发出消息的同时接收消息，这也不科学，如果客户端一直不发消息怎么办？还有一种就是当有消息到达服务器就接收。

这就需要发送消息和接收消息分别在两个不同的执行空间(Stack),这就需要新的线程(Thread)。在Java中讨论和使用线程必须用到java.lang中的Thread这个类，幸运的是，java.lang是默认被import的，因为其中包含String和System等基础。`
Thread t = new Thread();
t.start();`

这样就创建好了一个新的线程并且启动了它。启动一个新的线程代表这个线程将和main线程并发执行，除非有多个处理机，不然这都是广义上的并发。宏观上并行，微观上串行，同一时刻只会有一个线程执行，JVM会对这些线程进行调度确保每个线程都执行完毕。

像上文这样创建了一个空的线程也是没有意义的，因为没有给出需要这个线程执行的任务。对于Thread来说，一个Runnable对象就是一个需要执行的任务，它的任务就是Runnable中的第一个方法，且一定要是`public void run(){//TODO}`这样的方法。Runnable只是一个接口，这个接口中只有一个方法，就是run()，只要传出一个Runnable对象给Thread构造函数，就能通过编译。

对于JVM的线程调度器来说，他想怎么调度这些线程并不是可控的，也没有调度器的API供我们调用。所以每次执行同一个程序并不一定有相同的调度结果，下面是一个显示调度器不可预测的范例：

    
    public class RunThreads implements Runnable{
    
    	public static void main(String[] args) {
    		RunThreads runner = new RunThreads();
    		Thread alpha = new Thread(runner);
    		Thread beta = new Thread(runner);
    		alpha.setName("alpha");
    		beta.setName("beta");
    		alpha.start();
    		beta.start();
    
    	}
    	
    	public void run(){
    		for(int i=0; i< 15; i++){
    			System.out.println(Thread.currentThread().getName()+" is running");
    		}
    	}
    }


两次执行这个程序，得到的输出类似如下：

![](http://wulei.kim/wp-content/uploads/2017/07/run2.png) ![](http://wulei.kim/wp-content/uploads/2017/07/run1.png)































可以见到调度器两次调度的结果相差很大。有一个方法可以让我们稍微控制一下线程的状态，就是让线程休眠一下。`
try{
Thread.sleep(2000)
}catch(InterruptedException ex){
ex.printStackTrace();
}`

Thread.sleep()需要给出线程休眠多少毫秒的参数。这个方法可能会抛出InterruptedException异常，所有对它的调用必须包含在try/catch块中。

这样的线程执行存在一些并发性的问题：如果存在两个或以上线程中都有方法操作一个对象的话，对象的状态可能会出现失控。这与操作系统中的临界区是同一个问题，解决的方法就是将操作对象的那个方法的操作不能中断，调度器不能在这个方法执行过程中对该线程进行调度，也就是将该方法设置为一个临界区。在Java中，这样的操作可以用加锁来实现，线程执行到该方法，这个对象的锁就被锁上，任何线程都不能进入。事实上，Java中的每个对象又有一把锁，只是一般这个锁都是打开的而且我们不会使用到。方法执行完毕，这个对象的锁就被打开，其他线程才能够进入。使用synchronized这个关键字来修饰方法使它只能被单一的线程存取。

这样还会引发一些问题，就是死锁。当两个线程互相持有对方需要的资源，而两个线程谁也不肯先放手，这就是一个简单的死锁。Java没有自动处理死锁的能力，甚至不会知道死锁的发生。这就需要在程序设计时多加注意。
