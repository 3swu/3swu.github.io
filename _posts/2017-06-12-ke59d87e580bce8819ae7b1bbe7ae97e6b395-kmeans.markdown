---
author: wulei
comments: true
date: 2017-06-12 08:19:07+00:00
link: http://wulei.kim/2017/06/12/k%e5%9d%87%e5%80%bc%e8%81%9a%e7%b1%bb%e7%ae%97%e6%b3%95-kmeans/
slug: k%e5%9d%87%e5%80%bc%e8%81%9a%e7%b1%bb%e7%ae%97%e6%b3%95-kmeans
title: K均值聚类算法-KMeans
wordpress_id: 55
categories:
- 机器学习
tags:
- K-Means
- 无监督学习
- 机器学习
- 聚类
---

注：主要使用scikit-learn库进行K-Means算法的调用，例程在python3.6环境下调试通过。本文为作者个人学习后的总结，并不全面。


## 一、K-Means聚类算法


聚类(clustering)，就是根据数据的相似性将数据分为多类的过程。

评估两个不同样本之间的“相似性”，通常使用的方法是计算两个样本之间的“距离”。使用不同的方法计算样本间的距离会关系到聚类结果的好坏，通常的方法有欧式距离，曼哈顿距离，马氏距离和夹角余弦。

scikit-learn库提供的常用聚类算法包含在sklearn.cluster这个模块中。

K-Means算法以k为参数，把n个对象分为k个簇，使簇类具有较高的相似度，而簇间具有较低的相似度。

算法的处理过程如下：



 	
  1. 随机选择k个点作为初始的聚类中心。

 	
  2. 对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇。

 	
  3. 对于每个簇，计算所有点的均值并将其作为新的聚类中心。

 	
  4. 重复2、3直到聚类中心不再发生变化。


例：

![](http://wulei.kim/wp-content/uploads/2017/06/kmeans.png)



 	
  1. 随机选取两个点（红点和黄点）作为初始聚类中心。

 	
  2. 计算所有点到初始聚类中心的距离，并归入最近的簇。图中根据欧式距离，A,B点归为一类，C,D,E点归为一类。

 	
  3. 计算A,B类的均值并置为新的聚类中心，计算C,D,E类的均值置为新的聚类中心。

 	
  4. 计算所有点到聚类中心的距离，A,B,C归为一类，D,E归为一类。

 	
  5. 计算每个类的均值。此时聚类中心不再变化，算法结束。




## 二、K-Means聚类算法应用示例


样本数据为1999年全国31省份城镇居民家庭平均每人全年消费性支出的主要数据。通过聚类，可以了解1999年各个省份的消费水平在国内的情况。

数据集下载：[city](http://wulei.kim/wp-content/uploads/2017/06/city.txt)

    
    """
    Created on Mon Jun 12 14:43:02 2017
    
    @author: wulei
    """
    
    # -*- coding: utf-8 -*-
    
    import numpy as np
    from sklearn.cluster import KMeans
    
    def loadData(filePath):
        fr=open(filePath,'r+')
        lines=fr.readlines()
        retData=[]
        retCityName=[]
        
        for line in lines:
            items=line.strip().split(",")
            retCityName.append(items[0])
            retData.append([float(items[i]) for i in range(1,len(items))])
        return retData,retCityName
        
    if __name__=='__main__':
        data,cityName=loadData("C:\mechineLearning\K-means\city.txt")
        km=KMeans(n_clusters=4)
        label=km.fit_predict(data)
        expenses=np.sum(km.cluster_centers_,axis=1)
        
        CityCluster=[[],[],[],[]]
        for i in range(len(cityName)):
            CityCluster[label[i]].append(cityName[i])
        for i in range(len(CityCluster)):
            print("Expenses:%.2f"%expenses[i])
            print(CityCluster[i])


调用K-Means方法所需的参数：



 	
  * n_clusters：指定聚类中心的个数（k的值）

 	
  * init：初始聚类中心的初始化方法

 	
  * max_iter：最大的迭代次数


调用时一般只需给出n_clusters即可，max_iter默认为300。

运行结果：
Expenses:5678.62
['天津', '浙江', '福建', '重庆', '西藏']
Expenses:3788.76
['河北', '山西', '内蒙古', '辽宁', '吉林', '黑龙江', '江西', '山东', '河南', '贵州', '陕西', '甘肃', '青海', '宁夏', '新疆']
Expenses:7754.66
['北京', '上海', '广东']
Expenses:4512.27
['江苏', '安徽', '湖南', '湖北', '广西', '海南', '四川', '云南']
