---
author: wulei
comments: true
date: 2017-07-19 14:19:20+00:00
link: http://wulei.kim/2017/07/19/java-1/
slug: java-1
title: Java笔记(1) 泛型容器和对象数组
wordpress_id: 80
categories:
- Java
tags:
- Java
- 容器
- 数组
---

一、泛型容器

以实现一个NoteBook类为例，需要我们设计一些接口来满足添加记录，删除记录，返回记录数等功能。对于存放记录，我们不能使用String数组，因为我们要求在计算机内存足够的情况下无限的插入记录，而Java中的数组不能像C/C++数组一样动态扩容，所以数组不能满足要求。这里可以使用泛型容器来存放记录：
`import java.util.ArrayList;
public class NoteBook{
private ArrayList<String> notes = new ArrayList<String>;
//TODO:functions
}`

这里的notes就是一个实例化的String容器。Java中实例化一个容器需要说明两个类型，一是容器的类型，在这里容器的类型是ArrayList，还有一个是元素的类型，这里是String，说明容器中存放的都是String。

利用容器提供的多种方法，可以方便的实现NoteBook类的接口，举例：
`import java.util.ArrayList;
public class NoteBook{
private ArrayList<String> notes = new ArrayList<String>;
public void add(String s){
notes.add(s);
}
public void add(String s, int location){
notes.add(location, s);
}
public int getSize(){
return notes.size();
}
public String getNote(int index){
return notes.get(index);
}
public void removeNote(int index){
notes.remove(index);
}
public String[] list(){
String[] a = new String[notes.size()];
for(int i=0; i<notes.size(); i++ ){
a[i] = notes.get(i);
}
return a;
}
}`

二、对象数组

在上面NoteBook类中的list()方法中，声明了一个String对象的数组。在Java中，基础类型的变量直接存放变量的值，而类类型的对象名却是一个指向堆内存中该类型的对象的“引用”（与C++中的引用不同）。类似的，基础类型的数组直接存放值，如int[] a = new int[10];然后不初始化直接输出System.out.println(a[0]);可以看到输出结果为0，因为Java自动为它进行了初始化。但是如果定义一个String数组：String[] s = new String[10];然后直接输出s[0],可以看到输出为null，说明这个数组成员并没有管理堆内存中的任何对象。

值得注意的是，在使用for-each循环遍历基础类型数组时，不能在循环中改变原数组的值。但用for-each循环遍历如String对象数组时，例:for(String k:s){...}; k也是指向堆内存中的那一个对象，和原数组一样。所以可以在循环中改变原数组中的对象。
